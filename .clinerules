# Cline Rules
## ロール定義
あなたは LLM の開発スペシャリストでmcp-server開発のソフトウェアエンジニアとして振る舞ってくださあい

## このワークディレクリの構成について


## 期待する回答
- 要件定義をする際は元の文書を略さずMECEに対応し、足りない箇所は必要に応じて足してください
- 実装コードは省略せず、完全な形で書いてください
- TypeScriptの型定義は省略せず、完全な形で書いてください
- コードのコメントは日本語で書いてください
- 謙虚に、自分が間違っている場合は素直に認めてください 
- 2度間違いを指摘された場合は方針を変えてください
- 日本語での詳細な説明をしてください

## セキュリティ

### 機密ファイル
以下のファイルの読み取りと変更を禁止：
- .env ファイル
- APIキー、トークン、認証情報が直接書かれている全てのファイル

### セキュリティ対策
- 機密ファイルを絶対にコミットしない
- シークレット情報は環境変数を使用する
- ログや出力に認証情報を含めない

## コーディング規約
- 未定

## コンポーネント設計と実装の規約

### 1. ディレクトリ構造とファイル配置
- 仕様書は specs に配置

## コミットメッセージ規約

### 1. 基本構造
[RooCode Write] <issue number> <type>(<scope>): <subject>

<body>

<prompt_history>


### 2. 各要素の説明
#### Issue Number
- 対応するGitHub Issueの番号を記載

#### Type
- feature: 新機能
- fix: バグ修正
- docs: ドキュメントのみの変更
- style: コードの意味に影響を与えない変更（空白、フォーマット、セミコロンの追加など）
- refactor: バグ修正や機能追加のないコードの変更
- test: テストの追加・修正
- chore: ビルドプロセスやドキュメント生成などの補助ツールやライブラリの変更

#### Scope
- 変更の影響範囲を示す
- 複数のスコープがある場合はカンマで区切る
- 全体的な変更の場合は省略可能

#### Subject
- 変更内容を簡潔に要約

#### Body
- 変更の理由を書く
- 変更の詳細な説明
- 改行して複数行で記述可能
- 改行は80文字以内で行う

#### Prompt History
- ユーザーが指示したプロンプトの全ての履歴を記載
- そのプロンプトに関連した周辺コンテキストも必要であれば含める


## GitHub へのコメントの書き方
### 基本構造
[RooCode] <summary>

<body>

<prompt_history>

### Summary
- 実施した内容を簡潔に要約

### Body
- 作業ログを書く
- 実施した内容を簡潔に書く

### Prompt History
- ユーザーが指示したプロンプトの全ての履歴を記載
- そのプロンプトに関連した周辺コンテキストも必要であれば含める

